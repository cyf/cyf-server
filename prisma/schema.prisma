// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model User {
  id             String    @id @default(cuid()) @map("id")
  username       String    @unique @map("username")
  nickname       String?   @map("nickname")
  password       String    @map("password")
  email          String    @unique @map("email")
  email_verified DateTime? @map("email_verified")
  avatar         String?   @map("avatar")

  role        RoleType @default(USER) @map("role")
  create_date DateTime @default(now()) @map("create_date")
  update_date DateTime @updatedAt @map("update_date")
  is_del      IsDel    @default(NO) @map("is_del")

  accounts       Account[]
  sessions       Session[]
  emails         Email[]
  authenticators Authenticator[]
  insiders       Insider[]
  dictionaries   Dictionary[]

  @@index([username], type: Hash)
  @@index([email], type: Hash)
  @@map("users")
}

model Insider {
  id       String @id @default(cuid()) @map("id")
  app      String @map("app")
  platform String @map("platform")
  email    String @map("email")

  create_date DateTime @default(now()) @map("create_date")
  create_by   String   @map("create_by")
  update_date DateTime @updatedAt @map("update_date")
  update_by   String   @map("update_by")
  is_del      IsDel    @default(NO) @map("is_del")

  user User @relation(fields: [create_by], references: [id], onDelete: Cascade)

  @@unique([app, platform, email, create_by])
  @@map("insiders")
}

model Dictionary {
  id          String  @id @default(cuid()) @map("id")
  primary     String  @map("primary")
  key         String  @map("key")
  label       String  @map("label")
  description String? @map("description")

  create_date DateTime @default(now()) @map("create_date")
  create_by   String   @map("create_by")
  update_date DateTime @updatedAt @map("update_date")
  update_by   String   @map("update_by")
  is_del      IsDel    @default(NO) @map("is_del")

  user User @relation(fields: [create_by], references: [id], onDelete: Cascade)

  @@unique([primary, key])
  @@map("dictionaries")
}

model Email {
  id         String @id @default(cuid()) @map("id")
  message_id String @map("message_id")
  to         String @map("to")
  subject    String @map("subject")
  context    String @map("context")
  template   String @map("template")

  create_date DateTime @default(now()) @map("create_date")
  create_by   String   @map("create_by")
  update_date DateTime @updatedAt @map("update_date")
  is_del      IsDel    @default(NO) @map("is_del")

  user User @relation(fields: [create_by], references: [id], onDelete: Cascade)

  @@map("emails")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("authenticators")
}

enum RoleType {
  USER
  ADMIN
}

enum IsDel {
  YES
  NO
}
